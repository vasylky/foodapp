# Azure DevOps Pipeline для .NET Web API
# Виконує збірку і розгортання для гілки main і збірку для PR

trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - '*'  # Збірка для всіх PR

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  projectPath: 'SampleWebApiAspNetCore/SampleWebApiAspNetCore.csproj'
  dockerImageName: 'samplewebapiaspnetcore-webapi'
  containerRegistryName: 'pruvi123'  # Замініть на назву вашого Azure Container Registry

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildAndTest
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        packageType: 'sdk'
        version: '7.0.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: DotNetCoreCLI@2
      displayName: 'Restore packages'
      inputs:
        command: 'restore'
        projects: '$(projectPath)'
        feedsToUse: 'select'

    - task: DotNetCoreCLI@2
      displayName: 'Build project'
      inputs:
        command: 'build'
        projects: '$(projectPath)'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      inputs:
        command: 'test'
        projects: '**/*Tests.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build'
        testRunTitle: 'Unit Tests'
      continueOnError: true  # Продовжити навіть якщо тести не пройшли (в PR)

    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        containerRegistry: 'az-docker-conn'  # Створіть це підключення в Azure DevOps
        repository: '$(dockerImageName)'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.BuildId)
          latest

    # Зберігаємо артефакти збірки (для локальної перевірки)
    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy to Azure'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))  # Тільки для main
  jobs:
  - job: DeployToAzure
    steps:
    - task: AzureCLI@2
      displayName: 'Login to Azure'
      inputs:
        azureSubscription: 'food-conn'  # Створіть це підключення в Azure DevOps
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login --name $(containerRegistryName)

    - task: Docker@2
      displayName: 'Push Docker image to ACR'
      inputs:
        containerRegistry: 'az-docker-conn'
        repository: '$(dockerImageName)'
        command: 'push'
        tags: |
          $(Build.BuildId)
          latest

    - task: AzureWebAppContainer@1
      displayName: 'Deploy to Azure Web App'
      inputs:
        azureSubscription: 'food-conn'
        appName: 'pruvit123'  # Замініть на назву вашого веб-додатку в Azure
        imageName: '$(containerRegistryName).azurecr.io/$(dockerImageName):$(Build.BuildId)'